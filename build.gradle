import java.time.Year

plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version "1.6.0"
    id 'org.cadixdev.licenser' version "0.6.1"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.jfrog.artifactory' version '4.21.0'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group
version = project.mod_version

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    runs {
        testmodClient {
            client()
            name = "Testmod Client"
            source sourceSets.testmod
        }
    }
}

repositories {
    maven {
        url = 'https://maven.terraformersmc.com/releases'
        content {
            includeGroup 'com.terraformersmc'
        }
    }
    maven {
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"
    modCompileOnly ("maven.modrinth:iris:${project.iris_version}")

    compileOnly "org.jetbrains:annotations:${jb_annotations_version}"
    compileOnly "com.google.code.findbugs:jsr305:${findbugs_version}"
    compileOnly "org.apiguardian:apiguardian-api:${apiguardian_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.0-M1"

    testmodCompileOnly "org.jetbrains:annotations:${jb_annotations_version}"
    testmodImplementation sourceSets.main.output
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.18 (pre2) upwards uses Java 17.
    it.options.release = 17
}

loom {
    accessWidenerPath = file("src/main/resources/satin.accesswidener")
}

quiltflower {
    addToRuntimeClasspath.set(true)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

license {
    header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

    include "**/*.java"

    newLine = false // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.display_name
        projectOwners = rootProject.owners
        if (project.license_header.contains('GPL')) {
            if (!project.hasProperty("gpl_version")) {
                throw new RuntimeException("GPL version needs to be specified through the 'gpl_version' property")
            }
            gplVersion = project.gpl_version
        }
    }
}

apply from: 'release.gradle'
